#ifndef SRE_REGISTRY_H
#define SRE_REGISTRY_H

// Includes ////////////////////////////////////////////////////////////////

#include "SRE_Common.h"

// Classes /////////////////////////////////////////////////////////////////

namespace SRE
{
	class Registry
	{
	public:

		////////////////////////////////////////////////////////////////////
		// Public //////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////

		// Functions ///////////////////////////////////////////////////////

		Registry();
		Registry(HKEY hkey);
		Registry(const Registry &) = delete;
		Registry &operator=(const Registry &) = delete;
		~Registry();

		bool Open(HKEY hkey, const std::wstring &subkey, REGSAM desired);
		bool EnumKey(int index, std::wstring &name) const;
		bool GetString(const std::wstring &name, std::wstring &value) const;
		bool SetString(const std::wstring &name, const std::wstring &value, DWORD type = REG_SZ) const;
		bool GetBinary(const std::wstring &name, std::basic_string<unsigned char> &value) const;
		bool SetBinary(const std::wstring &name, const std::basic_string<unsigned char> &value, DWORD type = REG_BINARY) const;
		bool DeleteValue(const std::wstring &name) const;
		bool Close();

		////////////////////////////////////////////////////////////////////

	private:

		////////////////////////////////////////////////////////////////////
		// Private /////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////

		// Variables ///////////////////////////////////////////////////////

		HKEY handle;

		////////////////////////////////////////////////////////////////////
	};
}

////////////////////////////////////////////////////////////////////////////

#endif
